import sys
import os
import shutil # Добавлен импорт shutil
from pathlib import Path
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QMenuBar, QStatusBar, QFileDialog, QMessageBox,
    QListWidget, QSplitter, QListWidgetItem
)
from PySide6.QtGui import QAction, QKeySequence, QCloseEvent
from PySide6.QtCore import Qt, Slot

from models.project import Project
from models.docx_handler import DocxHandler
from views.simple_key_editor import SimpleKeyEditorWidget
from views.table_editor import TableEditorWidget

class MainWindow(QMainWindow):
    """
    Главное окно приложения.
    (Версия 7: Добавлена генерация документов)
    """
    def __init__(self, parent=None):
        # ... (код __init__ без изменений) ...
        super().__init__(parent)
        self.project = Project(); self.docx_handler = DocxHandler()
        self.setWindowTitle(self._build_window_title()); self.resize(1100, 750)
        self._central_widget = QSplitter(Qt.Orientation.Horizontal); self.setCentralWidget(self._central_widget)
        left_panel = QWidget(); left_layout = QVBoxLayout(left_panel)
        left_layout.addWidget(QLabel("Найденные ключи и таблицы:"))
        self.keys_list_widget = QListWidget(); self.keys_list_widget.currentItemChanged.connect(self._on_key_selected)
        left_layout.addWidget(self.keys_list_widget); self._central_widget.addWidget(left_panel)
        right_panel = QWidget(); self.editor_layout = QVBoxLayout(right_panel)
        self.editor_layout.setContentsMargins(5, 0, 0, 0)
        self.simple_key_editor = SimpleKeyEditorWidget(); self.simple_key_editor.data_changed.connect(self._on_editor_data_changed)
        self.editor_layout.addWidget(self.simple_key_editor)
        self.table_editor = TableEditorWidget(); self.table_editor.data_changed.connect(self._on_editor_data_changed)
        self.editor_layout.addWidget(self.table_editor)
        self.editor_layout.addStretch(1); self._central_widget.addWidget(right_panel)
        self._central_widget.setSizes([350, 750])
        self._create_menus(); self.setStatusBar(QStatusBar(self)); self.statusBar().showMessage("Приложение готово.")
        self._update_ui_state()


    # ... (методы _build_window_title, _update_window_title, _update_ui_state без изменений) ...
    def _build_window_title(self) -> str:
        base_title = "Генератор документов DOCX"; project_name = self.project.get_project_filename()
        modified_marker = "*" if self.project.is_modified else ""; return f"{project_name}{modified_marker} - {base_title}"
    @Slot()
    def _update_window_title(self): self.setWindowTitle(self._build_window_title())
    @Slot()
    def _update_ui_state(self):
        project_active = bool(self.project.template_paths) or self.project.filepath is not None
        can_save = self.project.is_modified; can_save_as = project_active
        self.save_project_action.setEnabled(can_save); self.save_project_as_action.setEnabled(can_save_as)
        self.add_template_action.setEnabled(True)
        # Активируем генерацию, если есть шаблоны и путь вывода
        self.generate_docs_action.setEnabled(bool(self.project.template_paths and self.project.output_path))
        self._update_window_title()

    def _create_menus(self):
        # ... (код создания меню "Файл", "Справка" без изменений) ...
        menu_bar = self.menuBar(); file_menu = menu_bar.addMenu("&Файл")
        new_project_action = QAction("&Новый проект", self); new_project_action.setShortcut(QKeySequence.StandardKey.New)
        new_project_action.triggered.connect(self._on_new_project); file_menu.addAction(new_project_action)
        open_project_action = QAction("&Открыть проект...", self); open_project_action.setShortcut(QKeySequence.StandardKey.Open)
        open_project_action.triggered.connect(self._on_open_project); file_menu.addAction(open_project_action)
        self.save_project_action = QAction("&Сохранить проект", self); self.save_project_action.setShortcut(QKeySequence.StandardKey.Save)
        self.save_project_action.triggered.connect(self._on_save_project); file_menu.addAction(self.save_project_action)
        self.save_project_as_action = QAction("Сохранить проект &как...", self); self.save_project_as_action.setShortcut(QKeySequence.StandardKey.SaveAs)
        self.save_project_as_action.triggered.connect(self._on_save_project_as); file_menu.addAction(self.save_project_as_action)
        file_menu.addSeparator()
        exit_action = QAction("&Выход", self); exit_action.setShortcut(QKeySequence.StandardKey.Quit)
        exit_action.triggered.connect(self.close); file_menu.addAction(exit_action)

        # Меню "Проект" - подключаем генерацию
        project_menu = menu_bar.addMenu("&Проект")
        self.add_template_action = QAction("Добавить &шаблон...", self)
        self.add_template_action.triggered.connect(self._on_add_template)
        project_menu.addAction(self.add_template_action)

        self.generate_docs_action = QAction("&Сгенерировать документы...", self)
        self.generate_docs_action.triggered.connect(self._on_generate_docs) # Связываем!
        project_menu.addAction(self.generate_docs_action)

        help_menu = menu_bar.addMenu("&Справка"); about_action = QAction("&О программе", self)
        # about_action.triggered.connect(self._on_about)
        help_menu.addAction(about_action)

    # ... (методы _check_unsaved_changes, _on_new_project, _on_open_project,
    #      _on_save_project, _on_save_project_as, _on_add_template,
    #      _update_keys_list_widget, _on_key_selected, _on_editor_data_changed,
    #      closeEvent без изменений) ...
    def _check_unsaved_changes(self) -> bool:
        if not self.project.is_modified: return True
        pn = self.project.get_project_filename()
        reply = QMessageBox.question(self, "Несохраненные изменения", f"В проекте '{pn}' ...", QMessageBox.StandardButton.Save | QMessageBox.StandardButton.Discard | QMessageBox.StandardButton.Cancel, QMessageBox.StandardButton.Save)
        if reply == QMessageBox.StandardButton.Save: return self._on_save_project()
        elif reply == QMessageBox.StandardButton.Cancel: return False
        else: return True
    @Slot()
    def _on_new_project(self):
        if not self._check_unsaved_changes(): return
        self.project.reset(); self.statusBar().showMessage("Создан новый пустой проект.")
        self.keys_list_widget.clear(); self.simple_key_editor.clear_editor(); self.table_editor.clear_editor()
        self._update_ui_state(); print("Действие: Новый проект")
    @Slot()
    def _on_open_project(self):
        if not self._check_unsaved_changes(): return
        start_dir = str(self.project.filepath.parent) if self.project.filepath else str(Path.home())
        ff = "Проекты DocxFormatter (*.dfp);;Все файлы (*)"; fp_str, _ = QFileDialog.getOpenFileName(self, "Открыть проект", start_dir, ff)
        if fp_str:
            self.simple_key_editor.clear_editor(); self.table_editor.clear_editor()
            if self.project.load(fp_str):
                self.statusBar().showMessage(f"Проект '{self.project.get_project_filename()}' загружен.")
                self._update_keys_list_widget()
            else: QMessageBox.warning(self, "Ошибка загрузки", f"... {fp_str}"); self.statusBar().showMessage("Ошибка ...") ; self.keys_list_widget.clear()
            self._update_ui_state(); print(f"Действие: Открыть проект - {fp_str}")
        else: self.statusBar().showMessage("Открытие проекта отменено.")
    @Slot()
    def _on_save_project(self) -> bool:
        if not self.project.filepath: return self._on_save_project_as()
        if self.project.save(): self.statusBar().showMessage(f"Проект сохранен в '{self.project.filepath.name}'."); self._update_ui_state(); print(f"Д: Сохранить - {self.project.filepath}"); return True
        else: QMessageBox.critical(self, "Ошибка сохранения", f"... {self.project.filepath}"); self.statusBar().showMessage("Ошибка ..."); return False
    @Slot()
    def _on_save_project_as(self) -> bool:
        start_dir = str(self.project.filepath.parent) if self.project.filepath else str(Path.home())
        start_fn = self.project.filepath.name if self.project.filepath else "Новый проект.dfp"; start_path = str(Path(start_dir) / start_fn)
        ff = "Проекты DocxFormatter (*.dfp);;Все файлы (*)"; fp_str, _ = QFileDialog.getSaveFileName(self, "Сохранить проект как...", start_path, ff)
        if fp_str:
            if self.project.save(fp_str): self.statusBar().showMessage(f"Проект сохранен как '{self.project.filepath.name}'."); self._update_ui_state(); print(f"Д: Сохранить как - {fp_str}"); return True
            else: QMessageBox.critical(self, "Ошибка сохранения", f"... {fp_str}"); self.statusBar().showMessage("Ошибка ..."); return False
        else: self.statusBar().showMessage("Сохранение отменено."); return False
    @Slot()
    def _on_add_template(self):
        start_dir = str(self.project.filepath.parent) if self.project.filepath else str(Path.home())
        ff = "Документы Word (*.docx);;Все файлы (*)"; fp_str, _ = QFileDialog.getOpenFileName(self, "Добавить шаблон DOCX", start_dir, ff)
        if fp_str:
            template_path = Path(fp_str)
            if self.project.add_template(fp_str):
                self.statusBar().showMessage(f"Шаблон '{template_path.name}' добавлен. Сканирование..."); QApplication.processEvents()
                scan_results = self.docx_handler.find_keys_in_template(template_path)
                found_keys = scan_results.get('keys', set()); found_tables_info = scan_results.get('tables', {})
                keys_added = 0; tables_added = 0
                if found_keys:
                    for key in found_keys:
                         if key not in self.project.keys_data: self.project.add_found_key(key); keys_added += 1
                if found_tables_info:
                    for table_id, table_info in found_tables_info.items():
                         if table_id not in self.project.keys_data: self.project.add_found_table(table_id, table_info.get('template_keys')); tables_added += 1
                self.statusBar().showMessage(f"Шаблон '{template_path.name}' добавлен. Новых ключей: {keys_added}, таблиц: {tables_added}.")
                self._update_keys_list_widget(); self._update_ui_state(); print(f"Д: Добавить шаблон - {fp_str}")
            else: QMessageBox.warning(self, "Ошибка", f"... {fp_str} ..."); self.statusBar().showMessage("Ошибка ...")
        else: self.statusBar().showMessage("Добавление шаблона отменено.")
    def _update_keys_list_widget(self):
        current_selection = self.keys_list_widget.currentItem(); current_text = current_selection.text() if current_selection else None
        self.keys_list_widget.clear();
        if not self.project.keys_data: return
        sorted_key_ids = sorted(self.project.keys_data.keys()); item_to_select = None
        for key_id in sorted_key_ids:
            item_text = key_id; key_info = self.project.keys_data[key_id]
            if key_info.get('type') == 'dynamic_table': item_text = f"[ТАБЛИЦА] {key_id}"
            list_item = QListWidgetItem(item_text); list_item.setData(Qt.ItemDataRole.UserRole, key_id)
            self.keys_list_widget.addItem(list_item)
            if item_text == current_text: item_to_select = list_item
        if item_to_select: self.keys_list_widget.setCurrentItem(item_to_select)
    @Slot()
    def _on_key_selected(self, current_item: QListWidgetItem | None, previous_item: QListWidgetItem | None):
        self.simple_key_editor.setVisible(False); self.table_editor.setVisible(False)
        if current_item:
            item_text = current_item.text(); key_id = current_item.data(Qt.ItemDataRole.UserRole)
            is_table = item_text.startswith("[ТАБЛИЦА]")
            if key_id:
                key_data = self.project.get_key_data(key_id)
                if is_table: print(f"Выбрана таблица: {key_id}"); self.table_editor.set_table_data(key_id, key_data); self.statusBar().showMessage(f"Выбрана таблица: {key_id}")
                else: print(f"Выбран ключ: {key_id}"); self.simple_key_editor.set_key_data(key_id, key_data); self.statusBar().showMessage(f"Выбран ключ: {key_id}")
            else: self.statusBar().showMessage("Ошибка: ID ...")
        else: self.simple_key_editor.clear_editor(); self.table_editor.clear_editor(); self.statusBar().showMessage("Ключ не выбран.")
    @Slot()
    def _on_editor_data_changed(self):
        if self.simple_key_editor.isVisible():
            key_id = self.simple_key_editor.get_current_key_id()
            if key_id: edited_data = self.simple_key_editor.get_edited_data(); self.project.update_key_data(key_id, edited_data); self._update_ui_state(); print(f"Данные ключа '{key_id}' обновлены.")
        elif self.table_editor.isVisible():
            table_id = self.table_editor.get_current_table_id()
            if table_id: edited_data = self.table_editor.get_edited_data(); self.project.update_key_data(table_id, edited_data); self._update_ui_state(); print(f"Данные таблицы '{table_id}' обновлены.")


    # --- Новый обработчик ---
    @Slot()
    def _on_generate_docs(self):
        """Обработчик действия 'Сгенерировать документы...'."""
        print("Действие: Сгенерировать документы")

        # 1. Проверяем наличие шаблонов
        if not self.project.template_paths:
            QMessageBox.warning(self, "Нет шаблонов", "Добавьте хотя бы один шаблон в проект.")
            return

        # 2. Проверяем и запрашиваем путь вывода, если не задан
        if not self.project.output_path:
            self.statusBar().showMessage("Выберите папку для сохранения сгенерированных документов.")
            dir_path_str = QFileDialog.getExistingDirectory(
                self,
                "Выберите папку для вывода",
                str(self.project.filepath.parent) if self.project.filepath else str(Path.home())
            )
            if dir_path_str:
                if not self.project.set_output_path(dir_path_str):
                     QMessageBox.critical(self, "Ошибка", f"Не удалось установить папку вывода:\n{dir_path_str}")
                     self.statusBar().showMessage("Ошибка установки папки вывода.")
                     return
                self._update_ui_state() # Обновляем активность кнопки генерации
            else:
                self.statusBar().showMessage("Генерация отменена (не выбрана папка вывода).")
                return # Пользователь отменил выбор папки

        # 3. Проверяем несохраненные изменения (опционально, но рекомендуется)
        if self.project.is_modified:
             reply = QMessageBox.question(self, "Сохранить?",
                                          "В проекте есть несохраненные изменения. Рекомендуется сохранить их перед генерацией.\nСохранить сейчас?",
                                          QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                          QMessageBox.StandardButton.Yes)
             if reply == QMessageBox.StandardButton.Yes:
                 if not self._on_save_project():
                     self.statusBar().showMessage("Генерация отменена (ошибка сохранения).")
                     return # Выходим, если сохранение не удалось

        # 4. Запускаем генерацию для каждого шаблона
        output_dir = self.project.output_path
        keys_data = self.project.get_all_keys_data()
        success_count = 0
        error_count = 0

        self.statusBar().showMessage("Начало генерации документов...")
        QApplication.processEvents() # Обновляем UI

        for template_path in self.project.template_paths:
            # Формируем имя выходного файла (можно сделать настраиваемым)
            # Пример: добавляем "_gen" к имени шаблона
            output_filename = f"{template_path.stem}_gen{template_path.suffix}"
            output_filepath = output_dir / output_filename

            self.statusBar().showMessage(f"Генерация '{output_filename}'...")
            QApplication.processEvents()

            if self.docx_handler.generate_document(template_path, output_filepath, keys_data):
                success_count += 1
            else:
                error_count += 1
                # Прервать генерацию при первой ошибке или продолжить? Пока продолжаем.

        # 5. Сообщаем результат
        final_message = f"Генерация завершена. Успешно: {success_count}"
        if error_count > 0:
            final_message += f", Ошибки: {error_count}"
            QMessageBox.warning(self, "Генерация завершена с ошибками", final_message + "\nСмотрите консоль для деталей.")
        else:
            QMessageBox.information(self, "Генерация завершена", final_message)

        self.statusBar().showMessage(final_message)


    def closeEvent(self, event: QCloseEvent):
        if self._check_unsaved_changes(): event.accept()
        else: event.ignore()

    # def _on_about(self): print("Действие: О программе")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_win = MainWindow()
    main_win.show()
    sys.exit(app.exec())